"""Summarise coverage percentages per module from coverage.xml.

This utility reads the ``coverage.xml`` file generated by the test
suite and prints a table of coverage percentages for selected modules.
It is designed for offline use in CI pipelines.  If the coverage
report is missing, the script prints "N/A" for all modules.

Usage:

    python scripts/coverage_summary.py

The script outputs lines in the form ``module	percent``.  Modules are
identified by their file paths relative to the repository root.
"""

from __future__ import annotations

import os
import sys
import xml.etree.ElementTree as ET
from typing import Dict, Tuple


def parse_coverage(file_path: str) -> Dict[str, float]:
    """Parse coverage.xml and return a mapping of filename to coverage percent.

    Coverage is computed as ``(covered lines / total lines) * 100`` per
    file.  Only files that appear in the report are returned.
    """
    coverage: Dict[str, float] = {}
    try:
        tree = ET.parse(file_path)
    except Exception:
        return coverage
    root = tree.getroot()
    # Iterate over all class elements in the report
    for clazz in root.findall(".//class"):
        filename = clazz.get("filename")
        if not filename:
            continue
        lines = clazz.find("lines")
        if lines is None:
            continue
        total = 0
        covered = 0
        for line in lines.findall("line"):
            total += 1
            hits = int(line.get("hits", "0"))
            if hits > 0:
                covered += 1
        if total == 0:
            percent = 0.0
        else:
            percent = (covered / total) * 100.0
        coverage[filename] = percent
    return coverage


def main(args: Tuple[str, ...]) -> None:
    """Main entry point: parse coverage.xml and print summary."""
    cov_file = args[0] if args else "coverage.xml"
    report = parse_coverage(cov_file)
    modules_of_interest = [
        "workers/src/workers/market_data.py",
        "workers/src/workers/user_channel.py",
        "workers/src/workers/clients/sdk_market_data.py",
        "workers/src/workers/clients/sdk_user_channel.py",
        "tests/helpers/fake_bus.py",
        "tests/helpers/fake_streams.py",
        "tests/integration/test_event_schema_parity.py",
    ]
    print("Coverage Summary:\nmodule\tpercent")
    for module in modules_of_interest:
        percent = report.get(module)
        if percent is None:
            print(f"{module}\tN/A")
        else:
            print(f"{module}\t{percent:.1f}")


if __name__ == "__main__":
    main(tuple(sys.argv[1:]))