version: '3.8'

services:
  db:
    image: postgres:15
    env_file:
      - ../conf/secrets.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:7
    volumes:
      - cache_data:/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: api/Dockerfile
    env_file:
      - ../conf/secrets.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_HOST=cache
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - ..:/app
    working_dir: /app/api
    ports:
      - "8000:8000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  workers:
    build:
      context: ..
      dockerfile: workers/Dockerfile
    env_file:
      - ../conf/secrets.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_HOST=cache
      - REDIS_PORT=${REDIS_PORT}
      - PYTHONPATH=/app/workers/src
      - STATE_STORE_URI=postgresql+asyncpg://postgres:postgres@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - ATLAS_USE_REFACTORED_WORKERS=true
      # Event bus configuration.  Workers will use RabbitMQ when RABBITMQ_HOST is set,
      # otherwise Redis or in-memory event bus.  See worker_main_refactored.py.
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - ..:/app
    working_dir: /app/workers
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "python", "-m", "workers.healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5

  backtester:
    build:
      context: ..
      dockerfile: backtester/Dockerfile
    env_file:
      - ../conf/secrets.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_HOST=cache
      - REDIS_PORT=${REDIS_PORT}
      - PYTHONPATH=/app/backtester/src
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - ..:/app
    working_dir: /app/backtester
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "python", "-m", "backtester.healthcheck"]
      interval: 60s
      timeout: 10s
      retries: 3

  ops-ui:
    build:
      context: ..
      dockerfile: ops-ui/Dockerfile
    env_file:
      - ../conf/secrets.env
    environment:
      - METRICS_URL=http://workers:9108/metrics
    depends_on:
      workers:
        condition: service_started
    volumes:
      - ..:/app
    working_dir: /app/ops-ui
    ports:
      - "3000:3000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      workers:
        condition: service_started
    ports:
      - "9090:9090"
    networks:
      - app-net

  grafana:
    image: grafana/grafana-oss:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - "3001:3000"
    networks:
      - app-net
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro

  # RabbitMQ broker for the event bus.  The rabbitmq service is defined
  # at the same level as other services so docker-compose treats it as a
  # container rather than a volume.  Credentials and ports come from
  # environment variables in secrets.env.  Management UI exposed on
  # 15672 for local inspection.  See conf/secrets.env for defaults.
  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ../conf/secrets.env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"  # management UI
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s

networks:
  app-net:
    driver: bridge

volumes:
  db_data:
  cache_data:

      retries: 5